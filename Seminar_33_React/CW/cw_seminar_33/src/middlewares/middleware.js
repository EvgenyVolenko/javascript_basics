export const middleware = (store) => (next) => (action) => {
    console.log('Действие: ', action);
    console.log('Состояние (до): ', store.getState());

    const result = next(action);

    console.log('Состояние (после): ', store.getState());
    return result;
}

// Задание 1 (тайминг 40 минут)
// Длā вýполнениā ÿтого заданиā, вам потребуетсā создатþ логгируĀщее
// middleware длā Redux, которое будет вýводитþ в консолþ информациĀ о
// действиāх (actions) и состоāнии (state) до и после вýполнениā каждого
// действиā. Это поможет в отладке и понимании потока даннýх в вашем
// приложении.
// ● Сначала установите необходимýе зависимости длā вашего
// проекта, исполþзуā npm install @reduxjs/toolkit react-redux. Затем
// создайте middleware, которое принимает три аргумента: store,
// next, и action. Ваше middleware должно вýводитþ в консолþ
// текущее действие и состоāние до его вýполнениā, вýзýватþ
// next(action) длā передачи действиā следуĀщему middleware или
// редþĀсеру, а затем вýводитþ в консолþ состоāние после
// вýполнениā действиā.
// ● После созданиā middleware, подклĀчите его к вашему Redux
// store. Длā ÿтого исполþзуйте функциĀ configureStore из
// @reduxjs/toolkit. В резулþтате, каждое действие, отправленное
// через store.dispatch, будет логгироватþсā вашим middleware